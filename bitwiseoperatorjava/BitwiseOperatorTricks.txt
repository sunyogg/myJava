
1 AND x = x
0 AND x = 0

1 OR x = 1
0 OR x = x

Addition of Bitwise:
0 + 0 = 0
1 + 0 = 1
1 + 1 = 10
1 + 1 + 1 = 11

Subtraction of Bitwise Operator:
1 - 0 = 1         10      100         We take carry when required but instead of
1 - 1 = 0       -  1    - 001         adding 10 we add 2. That's why 2(0) - 1 = 1
                  01      011
***** (1 - x = complement(x))

XOR:
    if 1 is even -> 0
    if 1 is odd -> 1
1 XOR x = !x
0 XOR x = x
x XOR x = 0

LEFT SHIFT <<
10101101 << 1                               101010110111010 << 5
left shift 10101101 by 1                    left shift 101010110111010 by 5
ans - 101011010                             ans - 10101011011101000000
***** a << k = (a).(2^k)
***** a << 1 = 2a

RIGHT SHIFT >>
x >> n => ignore first n bits of x from left.
101000111 >> 1                              101000111 >> 5
right shift 101000111 by 1                  right shift 101000111 by 5
ans - 10100011                              ans - 1010
****** a >> b = (a)/(2^b)

LSB or least significant digit tells us whether a number is even or odd.
1 -> odd
0 -> even
MSB or  most significant digit tells us whether a number is negative or positive.
1 -> negative
0 -> positive

----------------------------------------------------------------------------

How to find complement of number.
We know: (1 - x = complement(x))
so : 11111111
   - 10101010
     01010101 => complement of 10101010
How we are finding negative of a number (let's say 10)
    00000000
    00001010
 -  This should give us -10
If we add 1 in front of 0, it shouldn't change anything because if a there are
9 bits or bits more than 8 bit, than only first 8 bits from left are considered
rest all are discarded.
    100000000 => You know what this is? let's find out below
 -   00001010

num   binary  num        binary
8  => 1000    => 7 + 1   => 111 + 1  => replace num of zeros with 1 + 1
16 => 10000   => 15 + 1  => 1111 + 1 => replace num of zeros with 1 + 1

So we can rewrite the above equation as:
 ->   11111111 + 1 - 00001010
 ->   1 + [1111111 - 00001010](complement of number 00001010)
 ->   11111111
   -  00001010
      11110101 => complement of given number
Now:
    11110101
  + 00000001
    11110101


Representing a negative number in binary: (2's complement method)
Explanation of this method is given above
Given Number n
1) Complement of n = !n
2) Add 1 to !n
Ex - 10 =>   00001010
             11110101
           + 00000001
             11110101 => -10
--------------------------------------------------------------------------------

RANGE FORMULA
for n bits
[(-2^n-1) to ((2^n-1) - 1)]
